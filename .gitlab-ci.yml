# Transform tokens send from figma
default:
  image: image-registry.openshift-image-registry.svc:5000/openshift/nodejs:14-ubi8

stages:
    - build
    - analyze
    - verify

.npmPrepare:
    before_script:
        - npm ci

cache: &global_cache
    paths:
        - .npm/
        - node_modules/
        - cache/Cypress/
        - .sonar/cache/

codeanalysis:
    interruptible: true
    extends: .npmPrepare
    cache:
        <<: *global_cache
        policy: pull
    stage: analyze
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    script:
        - npm run codeanalytics
    only:
        - main # or the name of your main branch
        - dev
    allow_failure: true

lint:
    interruptible: true
    stage: verify
    extends: .npmPrepare
    needs:
        - job: prepare_npm
          artifacts: false
    cache:
        <<: *global_cache
        policy: pull
    script:
        - npm run format:check
        - npm run lint

unittest:
    interruptible: true
    stage: verify
    extends: .npmPrepare
    needs:
        - job: prepare_npm
          artifacts: true
    cache:
        <<: *global_cache
        policy: pull
    script:
        - free -h
        - npm run test:ci
    artifacts:
        paths:
            - coverage
        reports:
            junit: jest/junit.xml

build-for-e2e:
    interruptible: true
    stage: verify
    extends: .npmPrepare
    needs:
        - job: prepare_npm
          artifacts: true
    cache:
        <<: *global_cache
        policy: pull
    script:
        - npm run build:rhenag-dev-coverage
    artifacts:
        paths:
            - builds/rhenag-dev-coverage

build:
    # the name for the entire job
    name: Transform Figma design tokens for specific platforms
    stage: build
    #only:
        #- triggers
    extends: .npmPrepare
    script:
        - cat $TRIGGER_PAYLOAD
        - npm run clean # clear previous build
        - npm run transform-figma-tokens
        - echo 'Trying to create "tokens" directory...'
        - mkdir -p tokens
        - echo 'create json from request body'
        - #create json file out of


buildFigmaTokens:
    interruptible: true
    stage: build
    only:
      - triggers
    extends: .npmPrepare
    script:
      - cat $TRIGGER_PAYLOAD # see whats send by the figma plugin
      - npm run clean # clear previous build
      - npm run transform-figma-tokens
      - echo 'Trying to create "tokens" directory...'
      - mkdir -p tokens
      - echo 'create json from request body'
      # create a json file from the stringified json from the request body
        # echo 'design-tokens.tokens.json'
        # dir: 'tokens'

      # We now create a pull request
        # commit-message: "Update Design Tokens"
        # body: "Design tokens have been updated and need to be reviewed."
        # ms teams notification about newly created pull request (gitlab webhooks?)




<! - - - - - workbench starts here  - - - >

# Build tokens on updating the json file manually
buildTokensManually:
  interruptible: true
  stage: build
  only:
      - triggers
  extends: .npmPrepare
  script:
    - cat $TRIGGER_PAYLOAD
    - npm run clean # clear previous build
    - npm run transform-figma-tokens
    - echo 'Trying to create "tokens" directory...'
    - mkdir -p tokens
    - echo 'create json from request body'
    # this creates a json file from the stringified json from the request body
      # 'design-tokens.tokens.json'
      # it uses the json string that was send as the tokens parameter
      # dir: 'tokens'

    # We now create a pull request
      # commit-message: "Update Design Tokens"
      # body: "Design tokens have been updated and need to be reviewed."
      # ms teams notification about newly created pull request (gitlab webhooks?)

publishTokens:
  interruptible: true
  stage: publish
  extends: .npmPrepare
  script:
    - echo 'publish and release'
   # When the MR is reviewed and merged...
    # bump the version number in package json
    # Create a release-tag (e.g. release-1.2.3)
    # publish to nexus
    # notify in msteams channel about new available design token version
